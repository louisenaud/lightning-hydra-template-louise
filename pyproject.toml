[tool.poetry]
name = "lightning-hydra-template-louise"
version = "0.1.0"
description = "Template Python project for research experiments tracking in Pytorch Lightning and Hydra"
authors = ["Louise NAUD <louise.naud@gmail.com>"]
readme = "README.md"
packages = [{ include = "lightning_hydra_template_louise" }]

[tool.poetry.dependencies]
python = ">=3.9,<3.9.7 || >3.9.7,<3.12"
torch = "^2.0.1"
torchvision = "^0.15.2"
pytorch-lightning = "^2.0.5"
torchmetrics = "^1.0.1"
hydra-core = "^1.3.2"
hydra-colorlog = "^1.2.0"
scipy = "^1.11.1"
wandb = "^0.15.5"
mlflow = "^2.5.0"
timm = "^0.9.2"
gradio = "^3.37.0"
bandit = "^1.7.5"
streamlit = "^1.24.1"
stqdm = "^0.0.5"

[tool.poetry.group.dev.dependencies]
rich = "^13.4.2"
pytest = "^7.4.0"
sh = "^2.0.4"
pyrootutils = "^1.0.4"
pre-commit = "^3.3.3"
pylint = "^2.17.4"
black = "^23.7.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--durations=0",
    "--strict-markers",
    "--doctest-modules",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
log_cli = "True"
markers = [
    "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]

[tool.bandit]
exclude_dirs = ["tests", "logs"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile"
]
shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput"
]
subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output"
]
